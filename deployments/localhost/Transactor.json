{
  "address": "0xC9a43158891282A2B1475592D5719c001986Aaec",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wethAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dydxSoloMargin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapV2Router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sushiswapRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cryptoComRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "tradedTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowedWethAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Exchange",
          "name": "sellingExchangeIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tradedTokenAmountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "enum Exchange",
          "name": "buyingExchangeIndex",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "wethAmountOut",
          "type": "uint256"
        }
      ],
      "name": "SuccessfulTrade",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "number",
              "type": "uint256"
            }
          ],
          "internalType": "struct Account.Info",
          "name": "accountInfo",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "callFunction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "destruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Exchange",
          "name": "exchangeIndex",
          "type": "uint8"
        }
      ],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expectedBlockNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_wethAmountToBorrow",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange",
          "name": "_sellingExchangeIndex",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_wethAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "enum Exchange",
          "name": "_buyingExchangeIndex",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_tradedToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tradedTokenAmountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "transferETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd293a50ec9da17c1080b5f64611329b473c592946eafeabb5acb5b00934b1509",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xC9a43158891282A2B1475592D5719c001986Aaec",
    "transactionIndex": 0,
    "gasUsed": "1362533",
    "logsBloom": "0x
    "blockHash": "0x4d8253c2f8ca7f1ea96eb838f75c99d49ae16cd587717daa5446844b71741d34",
    "transactionHash": "0xd293a50ec9da17c1080b5f64611329b473c592946eafeabb5acb5b00934b1509",
    "logs": [],
    "blockNumber": 13737093,
    "cumulativeGasUsed": "1362533",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x1E0447b19BB6EcFdAe1e4AE1694b0C3659614e4e",
    "0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D",
    "0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F",
    "0xCeB90E4C17d626BE0fACd78b79c9c87d7ca181b3"
  ],
  "solcInputHash": "2c5e3133fd0f6d27c5b30798993e2b99",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dydxSoloMargin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapV2Router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sushiswapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cryptoComRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tradedTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowedWethAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Exchange\",\"name\":\"sellingExchangeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tradedTokenAmountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum Exchange\",\"name\":\"buyingExchangeIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wethAmountOut\",\"type\":\"uint256\"}],\"name\":\"SuccessfulTrade\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"internalType\":\"struct Account.Info\",\"name\":\"accountInfo\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callFunction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"destruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Exchange\",\"name\":\"exchangeIndex\",\"type\":\"uint8\"}],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmountToBorrow\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange\",\"name\":\"_sellingExchangeIndex\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"enum Exchange\",\"name\":\"_buyingExchangeIndex\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_tradedToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tradedTokenAmountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"transferETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"chainHandler/contracts/Transactor.sol\":\"Transactor\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"chainHandler/contracts/Owner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ncontract Owner {\\n  address public owner;\\n\\n  modifier owned() {\\n    require(msg.sender == owner, 'Owner only');\\n    _;\\n  }\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  function setOwner(address _newOwner) public owned {\\n    owner = _newOwner;\\n  }\\n}\\n\",\"keccak256\":\"0xfe17c9093d2171e6bba45b4243faeedba881cbe721093ed556b68c8d2d83ea47\",\"license\":\"MIT\"},\"chainHandler/contracts/Transactor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './Owner.sol';\\nimport './interfaces/IDyDxCallee.sol';\\nimport './interfaces/IDyDxSoloMargin.sol';\\nimport './interfaces/IUniswapV2Router.sol';\\nimport './libraries/DyDx.sol';\\n\\nenum Exchange {\\n  UniswapV2,\\n  Sushiswap,\\n  CryptoCom\\n}\\n\\ncontract Transactor is Owner, IDyDxCallee {\\n  IERC20 private weth;\\n  IDyDxSoloMargin private dydxSoloMargin;\\n  IUniswapV2Router private uniswapV2Router;\\n  IUniswapV2Router private sushiswapRouter;\\n  IUniswapV2Router private cryptoComRouter;\\n\\n  event SuccessfulTrade(\\n    address tradedTokenAddress,\\n    uint256 borrowedWethAmount,\\n    Exchange sellingExchangeIndex,\\n    uint256 tradedTokenAmountOut,\\n    Exchange buyingExchangeIndex,\\n    uint256 wethAmountOut\\n  );\\n\\n  struct CallFunctionData {\\n    uint256 borrowedWethAmount;\\n    address tradedToken;\\n    uint256 tradedTokenAmountOutMin;\\n    uint256 wethAmountOutMin;\\n    Exchange sellingExchangeIndex;\\n    Exchange buyingExchangeIndex;\\n    uint256 deadline;\\n  }\\n\\n  constructor(\\n    address _wethAddress,\\n    address _dydxSoloMargin,\\n    address _uniswapV2Router,\\n    address _sushiswapRouter,\\n    address _cryptoComRouter\\n  ) {\\n    weth = IERC20(_wethAddress);\\n\\n    // Initialize exchange contracts\\n    dydxSoloMargin = IDyDxSoloMargin(_dydxSoloMargin);\\n    uniswapV2Router = IUniswapV2Router(_uniswapV2Router);\\n    // Note: we use the same interface for SushiswapRouter and CryptoComRouter because\\n    // they are both forks of UniswapV2Router\\n    sushiswapRouter = IUniswapV2Router(_sushiswapRouter);\\n    cryptoComRouter = IUniswapV2Router(_cryptoComRouter);\\n  }\\n\\n  function destruct(address payable _to) external owned {\\n    // Transfer WETH left on the contract to the provided address\\n    uint256 wethBalance = weth.balanceOf(address(this));\\n    weth.transfer(_to, wethBalance);\\n\\n    selfdestruct(_to);\\n  }\\n\\n  // Function to receive ethers when msg.data is empty\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  // Fallback function to receive ethers when msg.data is not empty\\n  fallback() external payable {}\\n\\n  function transferERC20(\\n    address _token,\\n    uint256 _amount,\\n    address _to\\n  ) external owned {\\n    IERC20(_token).transfer(_to, _amount);\\n  }\\n\\n  function transferETH(uint256 _amount, address payable _to) external owned {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, ) = _to.call{value: _amount}('');\\n    require(success, 'Transfer failed');\\n  }\\n\\n  function getExchange(Exchange exchangeIndex) public view returns (IUniswapV2Router) {\\n    // Define selling and buying exchanges based on passed sellingExchangeIndex and buyingExchangeIndex\\n    // Note: we can use single variables that contain the selling and buying exchanges because\\n    // currently all our exchanges share the same interface (UniswapV2Router). This logic will need to\\n    // be updated once we support non-Uniswap like exchanges.\\n    IUniswapV2Router exchange = uniswapV2Router;\\n\\n    if (exchangeIndex == Exchange.Sushiswap) {\\n      exchange = sushiswapRouter;\\n    } else if (exchangeIndex == Exchange.CryptoCom) {\\n      exchange = cryptoComRouter;\\n    }\\n\\n    return exchange;\\n  }\\n\\n  function swap(\\n    address fromToken,\\n    uint256 fromTokenAmountIn,\\n    Exchange exchangeIndex,\\n    address toToken,\\n    uint256 toTokenAmountOutMin,\\n    uint256 deadline\\n  ) internal returns (uint256 toTokenAmountOut) {\\n    IUniswapV2Router exchange = getExchange(exchangeIndex);\\n\\n    // Allow the exchange to withdraw the amount of fromToken we want to exchange\\n    IERC20(fromToken).approve(address(exchange), fromTokenAmountIn);\\n\\n    // Swap all the fromTokens to toTokens\\n    address[] memory path = new address[](2);\\n    path[0] = fromToken;\\n    path[1] = toToken;\\n\\n    uint256 toTokenAmountReceived = exchange.swapExactTokensForTokens(\\n      fromTokenAmountIn,\\n      toTokenAmountOutMin,\\n      path,\\n      address(this),\\n      deadline\\n    )[1];\\n\\n    return toTokenAmountReceived;\\n  }\\n\\n  function trade(\\n    uint256 expectedBlockNumber,\\n    uint256 _wethAmountToBorrow,\\n    Exchange _sellingExchangeIndex,\\n    uint256 _wethAmountOutMin,\\n    Exchange _buyingExchangeIndex,\\n    address _tradedToken,\\n    uint256 _tradedTokenAmountOutMin,\\n    // Although the deadline does not really apply in our case since our trade is\\n    // only valid for one block, we still need to provide one to the exchanges\\n    uint256 _deadline\\n  ) external owned {\\n    // Make sure trade does not execute if a new block was mined since the transaction has been sent\\n    require(expectedBlockNumber == block.number, 'Trade expired');\\n\\n    /*\\n      The first step is to initiate a flashloan with DyDx.\\n\\n      The flash loan functionality in DyDx is predicated by their \\\"operate\\\" function,\\n      which takes a list of operations to execute, and defers validating the state of\\n      things until it's done executing them.\\n\\n      We thus create three operations, a Withdraw (which loans us the funds), a Call\\n      (which invokes the callFunction method on this contract), and a Deposit (which\\n      repays the loan, plus the 2 wei fee), and pass them all to \\\"operate\\\".\\n\\n      Note that the Deposit operation will invoke the transferFrom to pay the loan\\n      (or whatever amount it was initialized with) back to itself, there is no need\\n      to pay it back explicitly.\\n\\n      At the moment, we only make flashloans in WETH.\\n    */\\n\\n    // DyDx take a fee of 2 wei to execute the flashloan\\n    uint256 wethAmountToRepay = _wethAmountToBorrow + 2;\\n\\n    // Give DyDx permission to withdraw amount to repay. This amount\\n    // will only be withdrawn after we've executed our trade.\\n    weth.approve(address(dydxSoloMargin), wethAmountToRepay);\\n\\n    Actions.ActionArgs[] memory operations = new Actions.ActionArgs[](3);\\n\\n    // Borrow funds\\n    operations[0] = Actions.ActionArgs({\\n      actionType: Actions.ActionType.Withdraw,\\n      accountId: 0,\\n      amount: Types.AssetAmount({\\n        sign: false,\\n        denomination: Types.AssetDenomination.Wei,\\n        ref: Types.AssetReference.Delta,\\n        value: _wethAmountToBorrow // Amount to borrow\\n      }),\\n      primaryMarketId: 0, // WETH\\n      secondaryMarketId: 0,\\n      otherAddress: address(this),\\n      otherAccountId: 0,\\n      data: ''\\n    });\\n\\n    // Call callFunction to execute the rest of the trade\\n    operations[1] = Actions.ActionArgs({\\n      actionType: Actions.ActionType.Call,\\n      accountId: 0,\\n      amount: Types.AssetAmount({\\n        sign: false,\\n        denomination: Types.AssetDenomination.Wei,\\n        ref: Types.AssetReference.Delta,\\n        value: 0\\n      }),\\n      primaryMarketId: 0,\\n      secondaryMarketId: 0,\\n      otherAddress: address(this),\\n      otherAccountId: 0,\\n      data: abi.encode(\\n        // These parameters will be passed to callFunction\\n        CallFunctionData({\\n          borrowedWethAmount: _wethAmountToBorrow,\\n          tradedToken: _tradedToken,\\n          tradedTokenAmountOutMin: _tradedTokenAmountOutMin,\\n          wethAmountOutMin: _wethAmountOutMin,\\n          sellingExchangeIndex: _sellingExchangeIndex,\\n          buyingExchangeIndex: _buyingExchangeIndex,\\n          deadline: _deadline\\n        })\\n      )\\n    });\\n\\n    // Repay borrowed funds + fee\\n    operations[2] = Actions.ActionArgs({\\n      actionType: Actions.ActionType.Deposit,\\n      accountId: 0,\\n      amount: Types.AssetAmount({\\n        sign: true,\\n        denomination: Types.AssetDenomination.Wei,\\n        ref: Types.AssetReference.Delta,\\n        value: wethAmountToRepay\\n      }),\\n      primaryMarketId: 0, // Market ID of the WETH\\n      secondaryMarketId: 0,\\n      otherAddress: address(this),\\n      otherAccountId: 0,\\n      data: ''\\n    });\\n\\n    Account.Info[] memory accountInfos = new Account.Info[](1);\\n    accountInfos[0] = Account.Info({owner: address(this), number: 1});\\n\\n    dydxSoloMargin.operate(accountInfos, operations);\\n  }\\n\\n  // Function called by DyDx after giving us the loan\\n  // Note: the type of this function comes from DyDx, do not update it\\n  // (even if a warning shows saying some of the parameters are unused)!\\n  // Also, its name has to be callFunction.\\n  function callFunction(\\n    address sender,\\n    Account.Info memory accountInfo,\\n    bytes memory data\\n  ) external override {\\n    // Make sure the call comes from DyDx' solo margin contract\\n    assert(msg.sender == address(dydxSoloMargin));\\n\\n    // Decode the passed variables from the data object\\n    CallFunctionData memory tradeData = abi.decode(data, (CallFunctionData));\\n\\n    // Sell all the borrowed WETH for as much tradedToken as possible\\n    uint256 tradedTokenAmountOut = swap(\\n      address(weth), // fromToken\\n      tradeData.borrowedWethAmount, // fromTokenAmountIn\\n      tradeData.sellingExchangeIndex,\\n      tradeData.tradedToken, // toToken\\n      tradeData.tradedTokenAmountOutMin, // Minimum tradedToken amount out for this deal to be profitable\\n      tradeData.deadline\\n    );\\n\\n    // Sell all the tradedToken obtained for as much WETH as possible\\n    uint256 wethAmountOut = swap(\\n      tradeData.tradedToken,\\n      tradedTokenAmountOut, // tradedToken amount received from selling the borrowed WETH\\n      tradeData.buyingExchangeIndex,\\n      address(weth),\\n      tradeData.wethAmountOutMin, // Minimum WETH amount out for this deal to be profitable\\n      tradeData.deadline\\n    );\\n\\n    emit SuccessfulTrade(\\n      tradeData.tradedToken,\\n      tradeData.borrowedWethAmount,\\n      tradeData.sellingExchangeIndex,\\n      tradedTokenAmountOut,\\n      tradeData.buyingExchangeIndex,\\n      wethAmountOut\\n    );\\n\\n    // After that DyDx will withdraw the amount of WETH we borrowed from them (+ 2 wei fee) and the\\n    // profit (in WETH) will be left on the contract\\n  }\\n}\\n\",\"keccak256\":\"0x10f76b115498d23f2a85d2c1a8056cf52d13f41ca8658e5c77213b7f2485afe4\",\"license\":\"MIT\"},\"chainHandler/contracts/interfaces/IDyDxCallee.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../libraries/DyDx.sol';\\n\\n// Interface used for a contract to be callable after receiving a flash loan\\ninterface IDyDxCallee {\\n  function callFunction(\\n    address sender,\\n    Account.Info memory accountInfo,\\n    bytes memory data\\n  ) external;\\n}\\n\",\"keccak256\":\"0x7bf044029c2727d2d26225005475f1bc87c7645a7e20c1fe945edc9d3f915003\",\"license\":\"MIT\"},\"chainHandler/contracts/interfaces/IDyDxSoloMargin.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport '../libraries/DyDx.sol';\\n\\ninterface IDyDxSoloMargin {\\n  function operate(Account.Info[] memory accounts, Actions.ActionArgs[] memory actions) external;\\n}\\n\",\"keccak256\":\"0x47d65a4c3dc39d9c580fdfe3920f5bec4cf6afd162decfe980f4ae3cbb229cd6\",\"license\":\"MIT\"},\"chainHandler/contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IUniswapV2Router {\\n  function swapExactTokensForTokens(\\n    uint256 amountIn,\\n    uint256 amountOutMin,\\n    address[] calldata path,\\n    address to,\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x02050e021390896a51402fa93b5414a239ed64bdc0cfdfc0a71e78217ac4b156\",\"license\":\"MIT\"},\"chainHandler/contracts/libraries/DyDx.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary Types {\\n  enum AssetDenomination {\\n    Wei,\\n    Par\\n  }\\n\\n  enum AssetReference {\\n    Delta,\\n    Target\\n  }\\n\\n  struct AssetAmount {\\n    bool sign;\\n    AssetDenomination denomination;\\n    AssetReference ref;\\n    uint256 value;\\n  }\\n}\\n\\nlibrary Account {\\n  struct Info {\\n    address owner;\\n    uint256 number;\\n  }\\n}\\n\\nlibrary Actions {\\n  enum ActionType {\\n    Deposit,\\n    Withdraw,\\n    Transfer,\\n    Buy,\\n    Sell,\\n    Trade,\\n    Liquidate,\\n    Vaporize,\\n    Call\\n  }\\n\\n  struct ActionArgs {\\n    ActionType actionType;\\n    uint256 accountId;\\n    Types.AssetAmount amount;\\n    uint256 primaryMarketId;\\n    uint256 secondaryMarketId;\\n    address otherAddress;\\n    uint256 otherAccountId;\\n    bytes data;\\n  }\\n}\\n\",\"keccak256\":\"0xe5a7a0c63215961917da23ab9e4a540f93df67da853ed89ed57c1382f91bc2df\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001669380380620016698339810160408190526200003491620000be565b60008054336001600160a01b0319918216179091556001805482166001600160a01b0397881617905560028054821695871695909517909455600380548516938616939093179092556004805484169185169190911790556005805490921692169190911790556200012d565b80516001600160a01b0381168114620000b957600080fd5b919050565b600080600080600060a08688031215620000d6578081fd5b620000e186620000a1565b9450620000f160208701620000a1565b93506200010160408701620000a1565b92506200011160608701620000a1565b91506200012160808701620000a1565b90509295509295909350565b61152c806200013d6000396000f3fe6080604052600436106100795760003560e01c80637911f0821161004b5780637911f082146101025780638b4187131461013e5780638da5cb5b1461015e57806397e10a791461017e57005b806313af4035146100825780631beb2615146100a25780634688eaa1146100c25780636e07c470146100e257005b3661008057005b005b34801561008e57600080fd5b5061008061009d366004610d92565b61019e565b3480156100ae57600080fd5b506100806100bd366004610d92565b6101f3565b3480156100ce57600080fd5b506100806100dd366004611098565b61032e565b3480156100ee57600080fd5b506100806100fd366004611069565b610820565b34801561010e57600080fd5b5061012261011d366004610f9b565b6108e4565b6040516001600160a01b03909116815260200160405180910390f35b34801561014a57600080fd5b50610080610159366004610db5565b610969565b34801561016a57600080fd5b50600054610122906001600160a01b031681565b34801561018a57600080fd5b50610080610199366004610e92565b610a6d565b6000546001600160a01b031633146101d15760405162461bcd60e51b81526004016101c89061131f565b60405180910390fd5b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461021d5760405162461bcd60e51b81526004016101c89061131f565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561026157600080fd5b505afa158015610275573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102999190611051565b60015460405163a9059cbb60e01b81526001600160a01b0385811660048301526024820184905292935091169063a9059cbb90604401602060405180830381600087803b1580156102e957600080fd5b505af11580156102fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103219190610f7b565b50816001600160a01b0316ff5b6000546001600160a01b031633146103585760405162461bcd60e51b81526004016101c89061131f565b4388146103975760405162461bcd60e51b815260206004820152600d60248201526c151c98591948195e1c1a5c9959609a1b60448201526064016101c8565b60006103a4886002611471565b60015460025460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b390604401602060405180830381600087803b1580156103f657600080fd5b505af115801561040a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042e9190610f7b565b5060408051600380825260808201909252600091816020015b61044f610d0c565b815260200190600190039081610447575050604080516101008101825260018152600060208083018290528351608081018552828152949550919392840192918201908152602001600081526020018c81525081526020016000815260200160008152602001306001600160a01b031681526020016000815260200160405180602001604052806000815250815250816000815181106104ff57634e487b7160e01b600052603260045260246000fd5b602090810291909101015260408051610100810190915280600881526020016000815260200160405180608001604052806000151581526020016000600181111561055a57634e487b7160e01b600052602160045260246000fd5b815260200160008152602001600081525081526020016000815260200160008152602001306001600160a01b03168152602001600081526020016040518060e001604052808c8152602001886001600160a01b031681526020018781526020018a81526020018b60028111156105e057634e487b7160e01b600052602160045260246000fd5b815260200189600281111561060557634e487b7160e01b600052602160045260246000fd5b81526020018681525060405160200161061e9190611343565b6040516020818303038152906040528152508160018151811061065157634e487b7160e01b600052603260045260246000fd5b60209081029190910101526040805161010081019091528060008152602001600081526020016040518060800160405280600115158152602001600060018111156106ac57634e487b7160e01b600052602160045260246000fd5b8152602001600081526020018581525081526020016000815260200160008152602001306001600160a01b0316815260200160008152602001604051806020016040528060008152508152508160028151811061071957634e487b7160e01b600052603260045260246000fd5b6020908102919091010152604080516001808252818301909252600091816020015b604080518082019091526000808252602082015281526020019060019003908161073b5790505090506040518060400160405280306001600160a01b031681526020016001815250816000815181106107a457634e487b7160e01b600052603260045260246000fd5b602090810291909101015260025460405163a67a6a4560e01b81526001600160a01b039091169063a67a6a45906107e190849086906004016111ef565b600060405180830381600087803b1580156107fb57600080fd5b505af115801561080f573d6000803e3d6000fd5b505050505050505050505050505050565b6000546001600160a01b0316331461084a5760405162461bcd60e51b81526004016101c89061131f565b6000816001600160a01b03168360405160006040518083038185875af1925050503d8060008114610897576040519150601f19603f3d011682016040523d82523d6000602084013e61089c565b606091505b50509050806108df5760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064016101c8565b505050565b6003546000906001600160a01b0316600183600281111561091557634e487b7160e01b600052602160045260246000fd5b141561092d57506004546001600160a01b0316610963565b600283600281111561094f57634e487b7160e01b600052602160045260246000fd5b141561096357506005546001600160a01b03165b92915050565b6002546001600160a01b0316331461099157634e487b7160e01b600052600160045260246000fd5b6000818060200190518101906109a79190610fb7565b600154815160808301516020840151604085015160c08601519596506000956109dd956001600160a01b03169493929190610b1f565b90506000610a148360200151838560a00151600160009054906101000a90046001600160a01b031687606001518860c00151610b1f565b60208401518451608086015160a08701516040519495507f029b2750f12d6200ac7db7c47846edfb550cfc503b88373482cb821c1b3a90d494610a5d94939291889188906111a7565b60405180910390a1505050505050565b6000546001600160a01b03163314610a975760405162461bcd60e51b81526004016101c89061131f565b60405163a9059cbb60e01b81526001600160a01b0382811660048301526024820184905284169063a9059cbb90604401602060405180830381600087803b158015610ae157600080fd5b505af1158015610af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b199190610f7b565b50505050565b600080610b2b866108e4565b60405163095ea7b360e01b81526001600160a01b038083166004830152602482018a90529192509089169063095ea7b390604401602060405180830381600087803b158015610b7957600080fd5b505af1158015610b8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb19190610f7b565b506040805160028082526060820183526000926020830190803683370190505090508881600081518110610bf557634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250508581600181518110610c3757634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526040516338ed173960e01b81526000918416906338ed173990610c7c908c908a90879030908c906004016113a7565b600060405180830381600087803b158015610c9657600080fd5b505af1158015610caa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd29190810190610ed3565b600181518110610cf257634e487b7160e01b600052603260045260246000fd5b602002602001015190508093505050509695505050505050565b604080516101008101825260008082526020820152908101610d50604080516080810190915260008082526020820190815260200160008152602001600081525090565b8152602001600081526020016000815260200160006001600160a01b0316815260200160008152602001606081525090565b8051610d8d816114e9565b919050565b600060208284031215610da3578081fd5b8135610dae816114d4565b9392505050565b60008060008385036080811215610dca578283fd5b8435610dd5816114d4565b93506020601f1960408382011215610deb578485fd5b610df3611417565b925081870135610e02816114d4565b835260408701358284015291935060608601359167ffffffffffffffff80841115610e2b578485fd5b838801935088601f850112610e3e578485fd5b833581811115610e5057610e506114ab565b610e608484601f84011601611440565b92508083528984828701011115610e75578586fd5b808486018585013782019092019390935250929591945092509050565b600080600060608486031215610ea6578283fd5b8335610eb1816114d4565b9250602084013591506040840135610ec8816114d4565b809150509250925092565b60006020808385031215610ee5578182fd5b825167ffffffffffffffff80821115610efc578384fd5b818501915085601f830112610f0f578384fd5b815181811115610f2157610f216114ab565b8060051b9150610f32848301611440565b8181528481019084860184860187018a1015610f4c578788fd5b8795505b83861015610f6e578051835260019590950194918601918601610f50565b5098975050505050505050565b600060208284031215610f8c578081fd5b81518015158114610dae578182fd5b600060208284031215610fac578081fd5b8135610dae816114e9565b600060e08284031215610fc8578081fd5b60405160e0810181811067ffffffffffffffff82111715610feb57610feb6114ab565b604052825181526020830151611000816114d4565b80602083015250604083015160408201526060830151606082015261102760808401610d82565b608082015261103860a08401610d82565b60a082015260c083015160c08201528091505092915050565b600060208284031215611062578081fd5b5051919050565b6000806040838503121561107b578182fd5b82359150602083013561108d816114d4565b809150509250929050565b600080600080600080600080610100898b0312156110b4578586fd5b883597506020890135965060408901356110cd816114e9565b95506060890135945060808901356110e4816114e9565b935060a08901356110f4816114d4565b979a969950949793969295929450505060c08201359160e0013590565b60008151808452815b818110156111365760208185018101518683018201520161111a565b818111156111475782602083870101525b50601f01601f19169290920160200192915050565b6003811061116c5761116c611495565b9052565b8051151582526020810151611184816114c1565b60208301526040810151611197816114c1565b6040830152606090810151910152565b6001600160a01b03871681526020810186905260c081016111cb604083018761115c565b8460608301526111de608083018561115c565b8260a0830152979650505050505050565b6040808252835182820181905260009190606090818501906020808901865b8381101561123c57815180516001600160a01b0316865283015183860152938601939082019060010161120e565b50508683038188015287518084528184019250600581901b84018201898301885b8381101561130e57601f19878403018652815161016081516009811061128557611285611495565b855281870151878601528a82015161129f8c870182611170565b508982015160c081818801526080840151915060e0828189015260a085015192506112d66101008901846001600160a01b03169052565b9084015161012088015290920151610140860182905291506112fa81860183611111565b97870197945050509084019060010161125d565b50909b9a5050505050505050505050565b6020808252600a90820152694f776e6572206f6e6c7960b01b604082015260600190565b815181526020808301516001600160a01b031690820152604080830151908201526060808301519082015260808083015160e08301916113859084018261115c565b5060a083015161139860a084018261115c565b5060c092830151919092015290565b600060a082018783526020878185015260a0604085015281875180845260c0860191508289019350845b818110156113f65784516001600160a01b0316835293830193918301916001016113d1565b50506001600160a01b03969096166060850152505050608001529392505050565b6040805190810167ffffffffffffffff8111828210171561143a5761143a6114ab565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715611469576114696114ab565b604052919050565b6000821982111561149057634e487b7160e01b81526011600452602481fd5b500190565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600281106114d1576114d1611495565b50565b6001600160a01b03811681146114d157600080fd5b600381106114d157600080fdfea2646970667358221220e1d861ee6583a81a9b4fee92bf3e4cf6727152a99aeff98b67a89319d8f920af64736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 81,
        "contract": "chainHandler/contracts/Transactor.sol:Transactor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 135,
        "contract": "chainHandler/contracts/Transactor.sol:Transactor",
        "label": "weth",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)77"
      },
      {
        "astId": 138,
        "contract": "chainHandler/contracts/Transactor.sol:Transactor",
        "label": "dydxSoloMargin",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDyDxSoloMargin)730"
      },
      {
        "astId": 141,
        "contract": "chainHandler/contracts/Transactor.sol:Transactor",
        "label": "uniswapV2Router",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IUniswapV2Router)750"
      },
      {
        "astId": 144,
        "contract": "chainHandler/contracts/Transactor.sol:Transactor",
        "label": "sushiswapRouter",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IUniswapV2Router)750"
      },
      {
        "astId": 147,
        "contract": "chainHandler/contracts/Transactor.sol:Transactor",
        "label": "cryptoComRouter",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IUniswapV2Router)750"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IDyDxSoloMargin)730": {
        "encoding": "inplace",
        "label": "contract IDyDxSoloMargin",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)77": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router)750": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      }
    }
  }
}
