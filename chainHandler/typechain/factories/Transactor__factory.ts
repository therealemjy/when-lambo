/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type { Transactor, TransactorInterface } from "../Transactor";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_wethAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_dydxSoloMargin",
        type: "address",
      },
      {
        internalType: "address",
        name: "_uniswapV2Router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_sushiswapRouter",
        type: "address",
      },
      {
        internalType: "address",
        name: "_cryptoComRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tradedTokenAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "borrowedWethAmount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum Exchange",
        name: "sellingExchangeIndex",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "tradedTokenAmountOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "enum Exchange",
        name: "buyingExchangeIndex",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wethAmountOut",
        type: "uint256",
      },
    ],
    name: "SuccessfulTrade",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        components: [
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "number",
            type: "uint256",
          },
        ],
        internalType: "struct Account.Info",
        name: "accountInfo",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "callFunction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "destruct",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Exchange",
        name: "exchangeIndex",
        type: "uint8",
      },
    ],
    name: "getExchange",
    outputs: [
      {
        internalType: "contract IUniswapV2Router",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_newOwner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "expectedBlockNumber",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_wethAmountToBorrow",
        type: "uint256",
      },
      {
        internalType: "enum Exchange",
        name: "_sellingExchangeIndex",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "_tradedToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_tradedTokenAmountOutMin",
        type: "uint256",
      },
      {
        internalType: "enum Exchange",
        name: "_buyingExchangeIndex",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "_wethAmountOutMin",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_deadline",
        type: "uint256",
      },
    ],
    name: "trade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "transferERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address payable",
        name: "_to",
        type: "address",
      },
    ],
    name: "transferETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "";

export class Transactor__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    _wethAddress: string,
    _dydxSoloMargin: string,
    _uniswapV2Router: string,
    _sushiswapRouter: string,
    _cryptoComRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Transactor> {
    return super.deploy(
      _wethAddress,
      _dydxSoloMargin,
      _uniswapV2Router,
      _sushiswapRouter,
      _cryptoComRouter,
      overrides || {}
    ) as Promise<Transactor>;
  }
  getDeployTransaction(
    _wethAddress: string,
    _dydxSoloMargin: string,
    _uniswapV2Router: string,
    _sushiswapRouter: string,
    _cryptoComRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _wethAddress,
      _dydxSoloMargin,
      _uniswapV2Router,
      _sushiswapRouter,
      _cryptoComRouter,
      overrides || {}
    );
  }
  attach(address: string): Transactor {
    return super.attach(address) as Transactor;
  }
  connect(signer: Signer): Transactor__factory {
    return super.connect(signer) as Transactor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TransactorInterface {
    return new utils.Interface(_abi) as TransactorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Transactor {
    return new Contract(address, _abi, signerOrProvider) as Transactor;
  }
}
